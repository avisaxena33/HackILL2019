Educational Battle Royale
Inspired by the growing popuarity of battle royales, our team decided to put together an educational battle royale-esque game. Relying on the entertaining aspect of games and the intense atmosphere the battle royale genre creates, our project aims to bring a fun factor into studying. Our end goal is to have young kids develop greater math skills through a mix of competition and play. 


Rules
Players begin the game with 100 health points. Once the health points reach 0, the player is eliminated from the game. Players lose health points when they are in the zone. To stay alive, they must solve math questions to accumulate points and stay ahead of the zone. However, the zone expands and damages quicker and harder as time elapses. There will be easy, medium, and hard math questions with each difficulty awarding 3, 5, and 8 points respectively. The last player standing wins.


Prerequisites
1. node.js
2. express.js
3. socket.io
To install node.js, visit the website 'https://nodejs.org/en/' and click the download button
To install express.js, change directory to the HackILL2019 folder and run the code "npm install express --save"
To install socket.io, change directory to the HackILL2019 folder and run the code "npm install socket.io --save"


Credits
Michael Kwan
Michael Zhou
Aviral Saxena
James Pan
# Project Title

One Paragraph of project description goes here

## Getting Started

These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See deployment for notes on how to deploy the project on a live system.

### Prerequisites

What things you need to install the software and how to install them

```
Give examples
```

### Installing

A step by step series of examples that tell you how to get a development env running

Say what the step will be

```
Give the example
```

And repeat

```
until finished
```

End with an example of getting some data out of the system or using it for a little demo

## Running the tests

Explain how to run the automated tests for this system

### Break down into end to end tests

Explain what these tests test and why

```
Give an example
```

### And coding style tests

Explain what these tests test and why

```
Give an example
```

## Deployment

Add additional notes about how to deploy this on a live system

## Built With

* [Dropwizard](http://www.dropwizard.io/1.0.2/docs/) - The web framework used
* [Maven](https://maven.apache.org/) - Dependency Management
* [ROME](https://rometools.github.io/rome/) - Used to generate RSS Feeds

## Contributing

Please read [CONTRIBUTING.md](https://gist.github.com/PurpleBooth/b24679402957c63ec426) for details on our code of conduct, and the process for submitting pull requests to us.

## Versioning

We use [SemVer](http://semver.org/) for versioning. For the versions available, see the [tags on this repository](https://github.com/your/project/tags). 

## Authors

* **Billie Thompson** - *Initial work* - [PurpleBooth](https://github.com/PurpleBooth)

See also the list of [contributors](https://github.com/your/project/contributors) who participated in this project.

## License

This project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details

## Acknowledgments

* Hat tip to anyone whose code was used
* Inspiration
* etc
